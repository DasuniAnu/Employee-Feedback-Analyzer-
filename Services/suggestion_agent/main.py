from fastapi import FastAPI
from pydantic import BaseModel
import os
from dotenv import load_dotenv

try:
    from openai import OpenAI
except Exception:
    OpenAI = None

load_dotenv = lambda: None
try:
    from dotenv import load_dotenv as _ld
    _ld()
except Exception:
    pass

client = None
if OpenAI is not None and os.getenv('OPENAI_API_KEY'):
    client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

app = FastAPI(title='Suggestion Agent (OpenAI)')

class Inp(BaseModel):
    feedback: str
    themes: str
    entities: list[str] = []

@app.post('/suggest')
async def suggest(inp: Inp):
    def rule_based():
        fb = inp.feedback.lower()
        sugs = []
        if 'stress' in fb or 'overtime' in fb or 'late' in fb:
            sugs.append('Introduce stress management and review workload allocation.')
        if 'salary' in fb or 'pay' in fb:
            sugs.append('Consider reviewing compensation and communicate pay policy clearly.')
        if not sugs:
            sugs.append('Encourage better communication between managers and staff; collect more detail.')
        return {'suggestions': sugs, 'rationale': 'Rule-based fallback'}

    if client is None:
        return rule_based()

    system = (
        'You are an HR assistant. Given employee feedback, themes, and entities, produce 3 concise actionable suggestions and a one-line rationale. Avoid identifying individuals or using biased language. Return JSON.'
    )
    user = f"Feedback:\n{inp.feedback}\n\nThemes:\n{inp.themes}\n\nEntities:\n{', '.join(inp.entities)}"
    try:
        resp = client.chat.completions.create(model='gpt-4o-mini', messages=[{'role':'system','content':system},{'role':'user','content':user}], temperature=0.35)
        text = resp.choices[0].message.content
        import json
        try:
            parsed = json.loads(text)
        except Exception:
            lines = [ln.strip('-â€¢ ') for ln in text.splitlines() if ln.strip()]
            parsed = {'suggestions': lines[:5], 'rationale': 'Generated by LLM'}
        return parsed
    except Exception:
        return rule_based()
